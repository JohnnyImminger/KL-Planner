Input-Files:
    Raumliste.csv:
        Art des Hoersaals (unwichtig) ; Adresse (adresseBau/adresseRaum) ; Kapazitaet
    Anmeldungen.csv:
        Matrikelnummer ; Studiengang (Kuerzel); Pruefungsversion ; Prüfungsnummer ; Prüfungsform (Kürzel); Prüfungsform Text (ausführlich); Prüfungssemester (Jahr+Monat)
    Pruefungen.csv:
        Studiengang (Kuerzel) ; Vertiefung (unwichtig) ; Prüfungsversion ; Prüfungsnummer ; Prüfungsname Text (ausführlich); PrüferID1 ; Prüfername1 (anonym) ; PrüferID2 ; Prüfername2 ; Prüfungsform (Kürzel) ; Prüfungssemester (Jahr+Monat) ; Angeboten (J/N)

DatenObjekte:
    Raum:
        string raumArt;     --> aus csv
        int adrBau;         --> aus csv
        int adrRaum;        --> aus csv
        int capacity;     --> aus csv / festgelegten Teiler [4]

        bool timeSlots[Utility::timeSlotsProTag + Utility::timeSlotsPauseRaum] = {false};

            TODO jeder timeSlot sollte eine capacity haben um 2 klausuren gleichzeitig stattfinden zu lassen
            --> Raum ist eine Ressource die eine buchbare TimeSlots besitzt.
            --> Zur leichteren Handhabung wird mit einer immaginären Pause am Ende gerechnet
            --> Timeslot = 15min
            --> false = NICHT belegt

    Anmeldung:
        int studMatrikelNr;     --> aus csv
        string studStudiengang; --> aus csv
        int klausurVersion;       --> aus csv
        int klausurNummer;        --> aus csv
        string klausurForm;       --> aus csv
        string klausurFormText;       --> aus csv
        int klausurSemester;      --> aus csv

        --> Anmeldungen bilden die Verknüfung zwischen Klausuren und Studenten

    Klausur (einfach zu schreiben als Pruefungen):
        string studStudiengang; --> aus csv
        int vertiefung;     --> aus csv
        int klausurVersion;       --> aus csv
        int klausurNummer;        --> aus csv
        string pName;       --> aus csv
        int pPruefer1;      --> aus csv
        string pruefer1;    --> aus csv
        int pPruefer2;      --> aus csv
        string pruefer2;    --> aus csv
        float pDauer;       --> aus csv
        string klausurForm;       --> aus csv
        int klausurSemester;      --> aus csv
        bool angeboten;     --> aus csv

        int dataIndex;              --> Speicher Index im Data-Array    --> Referenz
        vector<int> studenten;  --> Studenten Index aus Data-Array  --> Referenz
        int anzTeilnehmer;      --> Size von studenten


        int dauerTimeSlots;     --> Umgerechnete pDauer
        int tag;                --> ERGEBNIS
        int startZeitTimeSlot;  --> ERGEBNIS
        vector<int> raumRefs;   --> ERGEBNIS

    Student:
        int studMatrikelNr;             --> aus Anmeldung
        string studStudiengang;         --> aus Anmeldung
        int anzKlausuren;           --> Size von klausuren
        vector<int> klausurIndizes; --> Klausur Index aus Data-Array    --> Referenz
        int dataIndex;                  --> Speicher Index im Data-Array    --> Referenz

    Professor:
        int identNr;                        --> aus Klausur
        string name;                        --> aus Klausur
        int anzKlausuren;                  --> Size von klausurDataIndizes
        vector<int> klausurDataIndizes;   --> Klausur Index aus Data-Array    --> Referenz

    ReadInput:
        vector <Klausur> klausuren;         --> Speichert ALLE Daten --> Ziel aller Referenzen
        vector <Anmeldung> anmeldungen;     --> Speichert ALLE Daten --> Ziel aller Referenzen
        vector <Raum> raeume;               --> Speichert ALLE Daten --> Ziel aller Referenzen
        vector <Professor> professoren;     --> Speichert ALLE Daten --> Ziel aller Referenzen
        vector <Student> studenten;         --> Speichert ALLE Daten --> Ziel aller Referenzen

    Algorithmus:
        ReadInput data;                             --> Objekt von ReadInput mit allen Daten
        vector<Raum> tage [Utility::klausurTage];   --> 9 Tage mit je 50+ Räumen in denen 40 TimeSlots gebucht werden können    --> Bildet die Ressource die gebucht wird